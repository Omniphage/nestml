{#
  Generates the getter function for the variable.

  @param variable VariableSymbol that captures the variable from the model
  @result C++ function
#}

{%- if variable.isFunction() and not variable.containsSumCall() %}
  inline {{declarations.print_variable_type(variable)}} {{names.getter(variable)}}() const {
    {%- set simpleExpression = odeTransformer.replaceSumCalls(variable.getDeclaringExpression()) %}
    return {{printer.print_expression(simpleExpression)}};
  }
{% else %}
  inline {{declarations.print_variable_type(variable)}} {{names.getter(variable)}}() const {
    return {{printer.printOrigin(variable)}}{{names.name(variable)}};
  }
  inline void {{names.setter(variable)}}(const {{declarations.print_variable_type(variable)}} __v) {
    {{printer.printOrigin(variable)}}{{names.name(variable)}} = __v;
  }
{% endif %}